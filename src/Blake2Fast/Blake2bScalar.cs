//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes to this file will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;

namespace SauceControl.Blake2Fast
{
	unsafe internal partial struct Blake2bContext
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static ulong ror(ulong x, byte y) => (x >> y) ^ (x << (64 - y));

		unsafe private static void mixScalar(Blake2bContext* s, ulong* m)
		{
			ulong v12 = 0x510E527FADE682D1ul;
			ulong v13 = 0x9B05688C2B3E6C1Ful;
			ulong v14 = 0x1F83D9ABFB41BD6Bul;

			v12 ^= s->t[0];
			v13 ^= s->t[1];
			v14 ^= s->f[0];

			ulong v0 = s->h[0];
			ulong v4 = s->h[4];
			ulong v8 = 0x6A09E667F3BCC908ul;

			v0 += v4 + m[0];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[1];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			ulong v1 = s->h[1];
			ulong v5 = s->h[5];
			ulong v9 = 0xBB67AE8584CAA73Bul;

			v1 += v5 + m[2];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[3];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			ulong v2 = s->h[2];
			ulong v6 = s->h[6];
			ulong v10 = 0x3C6EF372FE94F82Bul;

			v2 += v6 + m[4];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[5];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			ulong v3 = s->h[3];
			ulong v7 = s->h[7];
			ulong v11 = 0xA54FF53A5F1D36F1ul;
			ulong v15 = 0x5BE0CD19137E2179ul;

			v3 += v7 + m[6];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[7];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[8];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[9];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[10];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[11];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[12];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[13];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[14];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[15];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 2
			v0 += v4 + m[14];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[10];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[4];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[8];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[9];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[15];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[13];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[6];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[1];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[12];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[0];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[2];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[11];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[7];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[5];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[3];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 3
			v0 += v4 + m[11];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[8];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[12];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[0];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[5];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[2];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[15];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[13];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[10];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[14];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[3];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[6];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[7];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[1];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[9];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[4];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 4
			v0 += v4 + m[7];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[9];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[3];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[1];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[13];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[12];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[11];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[14];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[2];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[6];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[5];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[10];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[4];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[0];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[15];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[8];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 5
			v0 += v4 + m[9];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[0];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[5];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[7];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[2];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[4];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[10];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[15];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[14];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[1];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[11];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[12];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[6];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[8];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[3];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[13];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 6
			v0 += v4 + m[2];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[12];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[6];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[10];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[0];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[11];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[8];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[3];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[4];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[13];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[7];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[5];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[15];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[14];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[1];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[9];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 7
			v0 += v4 + m[12];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[5];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[1];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[15];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[14];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[13];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[4];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[10];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[0];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[7];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[6];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[3];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[9];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[2];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[8];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[11];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 8
			v0 += v4 + m[13];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[11];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[7];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[14];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[12];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[1];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[3];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[9];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[5];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[0];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[15];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[4];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[8];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[6];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[2];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[10];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 9
			v0 += v4 + m[6];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[15];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[14];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[9];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[11];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[3];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[0];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[8];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[12];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[2];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[13];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[7];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[1];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[4];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[10];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[5];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 10
			v0 += v4 + m[10];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[2];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[8];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[4];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[7];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[6];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[1];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[5];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[15];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[11];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[9];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[14];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[3];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[12];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[13];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[0];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 11
			v0 += v4 + m[0];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[1];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[2];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[3];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[4];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[5];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[6];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[7];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[8];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[9];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[10];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[11];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[12];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[13];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[14];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[15];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			//ROUND 12
			v0 += v4 + m[14];
			v12 ^= v0;
			v12 = ror(v12, 32);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 24);
			v0 += v4 + m[10];
			v12 ^= v0;
			v12 = ror(v12, 16);
			v8 += v12;
			v4 ^= v8;
			v4 = ror(v4, 63);

			v1 += v5 + m[4];
			v13 ^= v1;
			v13 = ror(v13, 32);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 24);
			v1 += v5 + m[8];
			v13 ^= v1;
			v13 = ror(v13, 16);
			v9 += v13;
			v5 ^= v9;
			v5 = ror(v5, 63);

			v2 += v6 + m[9];
			v14 ^= v2;
			v14 = ror(v14, 32);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 24);
			v2 += v6 + m[15];
			v14 ^= v2;
			v14 = ror(v14, 16);
			v10 += v14;
			v6 ^= v10;
			v6 = ror(v6, 63);

			v3 += v7 + m[13];
			v15 ^= v3;
			v15 = ror(v15, 32);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 24);
			v3 += v7 + m[6];
			v15 ^= v3;
			v15 = ror(v15, 16);
			v11 += v15;
			v7 ^= v11;
			v7 = ror(v7, 63);

			v0 += v5 + m[1];
			v15 ^= v0;
			v15 = ror(v15, 32);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 24);
			v0 += v5 + m[12];
			v15 ^= v0;
			v15 = ror(v15, 16);
			v10 += v15;
			v5 ^= v10;
			v5 = ror(v5, 63);

			v1 += v6 + m[0];
			v12 ^= v1;
			v12 = ror(v12, 32);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 24);
			v1 += v6 + m[2];
			v12 ^= v1;
			v12 = ror(v12, 16);
			v11 += v12;
			v6 ^= v11;
			v6 = ror(v6, 63);

			v2 += v7 + m[11];
			v13 ^= v2;
			v13 = ror(v13, 32);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 24);
			v2 += v7 + m[7];
			v13 ^= v2;
			v13 = ror(v13, 16);
			v8 += v13;
			v7 ^= v8;
			v7 = ror(v7, 63);

			v3 += v4 + m[5];
			v14 ^= v3;
			v14 = ror(v14, 32);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 24);
			v3 += v4 + m[3];
			v14 ^= v3;
			v14 = ror(v14, 16);
			v9 += v14;
			v4 ^= v9;
			v4 = ror(v4, 63);

			s->h[0] ^= v0 ^ v8;
			s->h[1] ^= v1 ^ v9;
			s->h[2] ^= v2 ^ v10;
			s->h[3] ^= v3 ^ v11;
			s->h[4] ^= v4 ^ v12;
			s->h[5] ^= v5 ^ v13;
			s->h[6] ^= v6 ^ v14;
			s->h[7] ^= v7 ^ v15;
		}
	}
}
