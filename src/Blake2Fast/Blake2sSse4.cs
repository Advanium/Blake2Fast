//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes to this file will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if USE_INTRINSICS
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.CompilerServices;

namespace SauceControl.Blake2Fast
{
	unsafe internal partial struct Blake2sContext
	{
		private static readonly byte[] rormask = new byte[] {
			1, 2, 3, 0, 5, 6, 7, 4, 9, 10, 11, 8, 13, 14, 15, 12, //r8
			2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13 //r16
		};

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> ror32_shuffle(Vector128<uint> x, Vector128<sbyte> y) =>
			Sse.StaticCast<sbyte, uint>(Ssse3.Shuffle(Sse.StaticCast<uint, sbyte>(x), y));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> ror32_12(Vector128<uint> x) =>
			Sse2.Xor(Sse2.ShiftRightLogical(x, 12), Sse2.ShiftLeftLogical(x, 20));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> ror32_7(Vector128<uint> x) =>
			Sse2.Xor(Sse2.ShiftRightLogical(x, 7), Sse2.ShiftLeftLogical(x, 25));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> blend_uint(Vector128<uint> x, Vector128<uint> y, byte m) =>
			Sse.StaticCast<ushort, uint>(Sse41.Blend(Sse.StaticCast<uint, ushort>(x), Sse.StaticCast<uint, ushort>(y), m));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> unpackhigh64_uint(Vector128<uint> x, Vector128<uint> y) =>
			Sse.StaticCast<ulong, uint>(Sse2.UnpackHigh(Sse.StaticCast<uint, ulong>(x), Sse.StaticCast<uint, ulong>(y)));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> unpacklow64_uint(Vector128<uint> x, Vector128<uint> y) =>
			Sse.StaticCast<ulong, uint>(Sse2.UnpackLow(Sse.StaticCast<uint, ulong>(x), Sse.StaticCast<uint, ulong>(y)));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> shuffle2_uint(Vector128<uint> x, Vector128<uint> y, byte m) =>
			Sse.StaticCast<float, uint>(Sse.Shuffle(Sse.StaticCast<uint, float>(x), Sse.StaticCast<uint, float>(y), m));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static Vector128<uint> shufflehigh_uint(Vector128<uint> x, byte m) =>
			Sse.StaticCast<ushort, uint>(Sse2.ShuffleHigh(Sse.StaticCast<uint, ushort>(x), m));

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void g1(ref Vector128<uint> row1, ref Vector128<uint> row2, ref Vector128<uint> row3, ref Vector128<uint> row4, ref Vector128<uint> b0, ref Vector128<sbyte> r16)
		{
			row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
			row4 = Sse2.Xor(row4, row1);
			row4 = ror32_shuffle(row4, r16);
			row3 = Sse2.Add(row3, row4);
			row2 = Sse2.Xor(row2, row3);
			row2 = ror32_12(row2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void g2(ref Vector128<uint> row1, ref Vector128<uint> row2, ref Vector128<uint> row3, ref Vector128<uint> row4, ref Vector128<uint> b0, ref Vector128<sbyte> r8)
		{
			row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
			row4 = Sse2.Xor(row4, row1);
			row4 = ror32_shuffle(row4, r8);
			row3 = Sse2.Add(row3, row4);
			row2 = Sse2.Xor(row2, row3);
			row2 = ror32_7(row2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void diagonalize(ref Vector128<uint> row1, ref Vector128<uint> row2, ref Vector128<uint> row3, ref Vector128<uint> row4)
		{
			row4 = Sse2.Shuffle(row4, 0b10010011); //2,1,0,3
			row3 = Sse2.Shuffle(row3, 0b01001110); //1,0,3,2
			row2 = Sse2.Shuffle(row2, 0b00111001); //0,3,2,1
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static void undiagonalize(ref Vector128<uint> row1, ref Vector128<uint> row2, ref Vector128<uint> row3, ref Vector128<uint> row4)
		{
			row4 = Sse2.Shuffle(row4, 0b00111001); //0,3,2,1
			row3 = Sse2.Shuffle(row3, 0b01001110); //1,0,3,2
			row2 = Sse2.Shuffle(row2, 0b10010011); //2,1,0,3
		}

		unsafe private static void mixSse41(Blake2sContext* s, uint* m)
		{
			var row1 = Sse2.LoadVector128(s->h);
			var row2 = Sse2.LoadVector128(s->h + 4);

			ref uint riv = ref iv[0];
			var row3 = Sse2.LoadVector128((uint*)Unsafe.AsPointer(ref riv));
			var row4 = Sse2.LoadVector128((uint*)Unsafe.AsPointer(ref Unsafe.Add(ref riv, 4)));

			row4 = Sse2.Xor(row4, Sse2.LoadVector128(s->t)); // reads into f[] as well

			ref byte rrv = ref rormask[0];
			var r8 = Sse2.LoadVector128((sbyte*)Unsafe.AsPointer(ref rrv));
			var r16 = Sse2.LoadVector128((sbyte*)Unsafe.AsPointer(ref Unsafe.Add(ref rrv, 16)));

			var m0 = Sse2.LoadVector128(m);
			var m1 = Sse2.LoadVector128(m + 4);
			var m2 = Sse2.LoadVector128(m + 8);
			var m3 = Sse2.LoadVector128(m + 12);

			//ROUND 1
			var b0 = shuffle2_uint(m0, m1, 0b10001000); //2,0,2,0;

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			b0 = shuffle2_uint(m0, m1, 0b11011101); //3,1,3,1

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			b0 = shuffle2_uint(m2, m3, 0b10001000); //2,0,2,0;

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			b0 = shuffle2_uint(m2, m3, 0b11011101); //3,1,3,1

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 2
			var t0 = blend_uint(m1, m2, 0b00001100);
			var t1 = Sse2.ShiftLeftLogical128BitLane(m3, 4);
			var t2 = blend_uint(t0, t1, 0b11110000);
			b0 = Sse2.Shuffle(t2, 0b10010011); //2,1,0,3

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.Shuffle(m2, 0b00001000); //0,0,2,0
			t1 = blend_uint(m1, m3, 0b11000000);
			t2 = blend_uint(t0, t1, 0b11110000);
			b0 = Sse2.Shuffle(t2, 0b10110001); //2,3,0,1

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = Sse2.ShiftLeftLogical128BitLane(m1, 4);
			t1 = blend_uint(m2, t0, 0b00110000);
			t2 = blend_uint(m0, t1, 0b11110000);
			b0 = Sse2.Shuffle(t2, 0b10110001); //2,3,0,1

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse2.ShiftLeftLogical128BitLane(m3, 4);
			t2 = blend_uint(t0, t1, 0b00001100);
			b0 = Sse2.Shuffle(t2, 0b10110001); //2,3,0,1

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 3
			t0 = Sse2.UnpackHigh(m2, m3);
			t1 = blend_uint(m3, m1, 0b00001100);
			t2 = blend_uint(t0, t1, 0b00001111);
			b0 = Sse2.Shuffle(t2, 0b11010010); //3,1,0,2

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.UnpackLow(m2, m0);
			t1 = blend_uint(t0, m0, 0b11110000);
			t2 = Sse2.ShiftLeftLogical128BitLane(m3, 8);
			b0 = blend_uint(t1, t2, 0b11000000);

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = blend_uint(m0, m2, 0b00111100);
			t1 = Sse2.ShiftRightLogical128BitLane(m1, 12);
			t2 = blend_uint(t0, t1, 0b00000011);
			b0 = Sse2.Shuffle(t2, 0b01001110); //1,0,3,2

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.ShiftLeftLogical128BitLane(m3, 4);
			t1 = blend_uint(m0, m1, 0b00110011);
			t2 = blend_uint(t1, t0, 0b11000000);
			b0 = Sse2.Shuffle(t2, 0b00011011); //0,1,2,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 4
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse2.UnpackHigh(t0, m2);
			t2 = blend_uint(t1, m3, 0b00001100);
			b0 = Sse2.Shuffle(t2, 0b11010010); //3,1,0,2

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.ShiftLeftLogical128BitLane(m2, 8);
			t1 = blend_uint(m3, m0, 0b00001100);
			t2 = blend_uint(t1, t0, 0b11000000);
			b0 = Sse2.Shuffle(t2, 0b10000111); //2,0,1,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = blend_uint(m0, m1, 0b00001111);
			t1 = blend_uint(t0, m3, 0b11000000);
			b0 = Sse2.Shuffle(t1, 0b11000110); //3,0,1,2

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.UnpackLow(m0, m2);
			t1 = Sse2.UnpackHigh(m1, m2);
			b0 = unpacklow64_uint(t1, t0);

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 5
			t0 = unpacklow64_uint(m1, m2);
			t1 = unpackhigh64_uint(m0, m2);
			t2 = blend_uint(t0, t1, 0b00110011);
			b0 = Sse2.Shuffle(t2, 0b10000111); //2,0,1,3

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = unpackhigh64_uint(m1, m3);
			t1 = unpacklow64_uint(m0, m1);
			b0 = blend_uint(t0, t1, 0b00110011);

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = unpackhigh64_uint(m3, m1);
			t1 = unpackhigh64_uint(m2, m0);
			b0 = blend_uint(t1, t0, 0b00110011);

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = blend_uint(m0, m2, 0b00000011);
			t1 = Sse2.ShiftLeftLogical128BitLane(t0, 8);
			t2 = blend_uint(t1, m3, 0b00001111);
			b0 = Sse2.Shuffle(t2, 0b01100011); //1,2,0,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 6
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse2.UnpackLow(m0, m2);
			b0 = unpacklow64_uint(t0, t1);

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.ShiftRightLogical128BitLane(m2, 4);
			t1 = blend_uint(m0, m3, 0b00000011);
			b0 = blend_uint(t1, t0, 0b00111100);

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = blend_uint(m1, m0, 0b00001100);
			t1 = Sse2.ShiftRightLogical128BitLane(m3, 4);
			t2 = blend_uint(t0, t1, 0b00110000);
			b0 = Sse2.Shuffle(t2, 0b01101100); //1,2,3,0

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = unpacklow64_uint(m1, m2);
			t1= Sse2.Shuffle(m3, 0b00100001); //0,2,0,1
			b0 = blend_uint(t0, t1, 0b00110011);

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 7
			t0 = Sse2.ShiftLeftLogical128BitLane(m1, 12);
			t1 = blend_uint(m0, m3, 0b00110011);
			b0 = blend_uint(t1, t0, 0b11000000);

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = blend_uint(m3, m2, 0b00110000);
			t1 = Sse2.ShiftRightLogical128BitLane(m1, 4);
			t2 = blend_uint(t0, t1, 0b00000011);
			b0 = Sse2.Shuffle(t2, 0b10011100); //2,1,3,0

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = unpacklow64_uint(m0, m2);
			t1 = Sse2.ShiftRightLogical128BitLane(m1, 4);
			b0 = Sse2.Shuffle(blend_uint(t0, t1, 0b00001100), 0b10110100); //2,3,1,0

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.UnpackHigh(m1, m2);
			t1 = unpackhigh64_uint(m0, t0);
			b0 = Sse2.Shuffle(t1, 0b11000110); //3,0,1,2

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 8
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = blend_uint(t0, m3, 0b00001111);
			b0 = Sse2.Shuffle(t1, 0b10001101); //2,0,3,1

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = blend_uint(m2, m3, 0b00110000);
			t1 = Sse2.ShiftRightLogical128BitLane(m0, 4);
			t2 = blend_uint(t0, t1, 0b00000011);
			b0 = Sse2.Shuffle(t2, 0b01001011); //1,0,2,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = unpackhigh64_uint(m0, m3);
			t1 = unpacklow64_uint(m1, m2);
			t2 = blend_uint(t0, t1, 0b00111100);
			b0 = Sse2.Shuffle(t2, 0b00101101); //0,2,3,1

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.UnpackLow(m0, m1);
			t1 = Sse2.UnpackHigh(m1, m2);
			b0 = unpacklow64_uint(t0, t1);

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 9
			t0 = Sse2.UnpackHigh(m1, m3);
			t1 = unpacklow64_uint(t0, m0);
			t2 = blend_uint(t1, m2, 0b11000000);
			b0 = shufflehigh_uint(t2, 0b01001110); //1,0,3,2

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.UnpackHigh(m0, m3);
			t1 = blend_uint(m2, t0, 0b11110000);
			b0 = Sse2.Shuffle(t1, 0b00100111); //0,2,1,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = blend_uint(m2, m0, 0b00001100);
			t1 = Sse2.ShiftLeftLogical128BitLane(t0, 4);
			b0 = blend_uint(t1, m3, 0b00001111);

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = blend_uint(m1, m0, 0b00110000);
			b0 = Sse2.Shuffle(t0, 0b01001110); //1,0,3,2

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			//ROUND 10
			t0 = blend_uint(m0, m2, 0b00000011);
			t1 = blend_uint(m1, m2, 0b00110000);
			t2 = blend_uint(t1, t0, 0b00001111);
			b0 = Sse2.Shuffle(t2, 0b01110010); //1,3,0,2

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = Sse2.ShiftLeftLogical128BitLane(m0, 4);
			t1 = blend_uint(m1, t0, 0b11000000);
			b0 = Sse2.Shuffle(t1, 0b01100011); //1,2,0,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			diagonalize(ref row1, ref row2, ref row3, ref row4);

			t0 = Sse2.UnpackHigh(m0, m3);
			t1 = Sse2.UnpackLow(m2, m3);
			t2 = unpackhigh64_uint(t0, t1);
			b0 = Sse2.Shuffle(t2, 0b11001001); //3,0,2,1

			g1(ref row1, ref row2, ref row3, ref row4, ref b0, ref r16);

			t0 = blend_uint(m3, m2, 0b11000000);
			t1 = Sse2.UnpackLow(m0, m3);
			t2 = blend_uint(t0, t1, 0b00001111);
			b0 = Sse2.Shuffle(t2, 0b00011011); //0,1,2,3

			g2(ref row1, ref row2, ref row3, ref row4, ref b0, ref r8);
			undiagonalize(ref row1, ref row2, ref row3, ref row4);

			row1 = Sse2.Xor(row1, row3);
			row2 = Sse2.Xor(row2, row4);
			row1 = Sse2.Xor(row1, Sse2.LoadVector128(s->h));
			row2 = Sse2.Xor(row2, Sse2.LoadVector128(s->h + 4));
			Sse2.Store(s->h, row1);
			Sse2.Store(s->h + 4, row2);
		}
	}
}
#endif
